version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: growhub_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - growhub_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: growhub_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - growhub_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  php-fpm:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: growhub_php
    volumes:
      - .:/var/www/html
      - ./logs:/var/www/html/logs
    networks:
      - growhub_network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    restart: unless-stopped

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: growhub_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/html/public
      - ./logs:/var/www/html/logs
    networks:
      - growhub_network
    depends_on:
      - php-fpm
    restart: unless-stopped

  worker-outbound:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: growhub_worker_outbound
    command: php /var/www/html/workers/message_sender_worker.php
    volumes:
      - .:/var/www/html
      - ./logs:/var/www/html/logs
    networks:
      - growhub_network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    restart: unless-stopped
    deploy:
      replicas: 3

  worker-inbound:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: growhub_worker_inbound
    command: php /var/www/html/workers/event_processor_worker.php
    volumes:
      - .:/var/www/html
      - ./logs:/var/www/html/logs
    networks:
      - growhub_network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    restart: unless-stopped
    deploy:
      replicas: 2

  worker-outbox:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: growhub_worker_outbox
    command: php /var/www/html/workers/outbox_processor_worker.php
    volumes:
      - .:/var/www/html
      - ./logs:/var/www/html/logs
    networks:
      - growhub_network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    restart: unless-stopped

  worker-health:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: growhub_worker_health
    command: php /var/www/html/workers/health_check_worker.php
    volumes:
      - .:/var/www/html
      - ./logs:/var/www/html/logs
    networks:
      - growhub_network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  growhub_network:
    driver: bridge

